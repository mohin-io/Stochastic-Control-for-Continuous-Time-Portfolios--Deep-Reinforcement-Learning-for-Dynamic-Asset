name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy

    - name: Run Black
      run: black --check --diff src/ tests/ scripts/

    - name: Run isort
      run: isort --check-only --diff src/ tests/ scripts/

    - name: Run flake8
      run: flake8 src/ tests/ scripts/ --max-line-length=120 --extend-ignore=E203,W503

    - name: Run mypy
      run: mypy src/ --ignore-missing-imports
      continue-on-error: true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    name: Build and Validate
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Validate imports
      run: |
        python -c "from src.agents.sac_agent import SACAgent; print('SAC import successful')"
        python -c "from src.agents.ppo_agent import PPOAgent; print('PPO import successful')"
        python -c "from src.agents.dqn_agent import DQNAgent; print('DQN import successful')"
        python -c "from src.environments.portfolio_env import PortfolioEnv; print('Environment import successful')"

    - name: Check data pipeline
      run: |
        python -c "from src.data_pipeline.features import FeatureEngineer; print('Feature engineering available')"
        python -c "from src.regime_detection.gmm_classifier import GMMRegimeDetector; print('GMM available')"

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run Safety check
      run: safety check --json || true
      continue-on-error: true

    - name: Run Bandit security scan
      run: bandit -r src/ -f json -o bandit-report.json || true
      continue-on-error: true

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: docker build -t portfolio-rl:latest .
      continue-on-error: true
